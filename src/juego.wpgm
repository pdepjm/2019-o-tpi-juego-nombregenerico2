import wollok.game.*

class Movible {

	var property image
	var property position
	const velocidad // Tiempo en milisegundos que tarda en moverse de una celda a otra
	const limiteOffsetX = 5 // Cuantas celdas se mueve despues de dejar la pantalla

	method empezarMovimientoDerecha() {
		const posicionY = position.y()
		game.onTick(velocidad, "moverse movible a derecha", { if (self.position() == game.at(game.width() + limiteOffsetX, posicionY)) {
				self.position(game.at(0, posicionY))
			} else self.position(self.position().right(1))
		})
	}

	method empezarMovimientoIzquierda() {
		const posicionY = position.y()
		game.onTick(velocidad, "moverse movible a izquierda", { if (self.position() == game.at(-limiteOffsetX, posicionY)) {
				self.position(game.at(game.width(), posicionY))
			} else self.position(self.position().left(1))
		})
	}

}

class Auto inherits Movible {

	method colisionarConRana() {
		game.stop()
	}

}


class Tronco inherits Movible {

	method colisionarConRana() {
		game.onTick(1, "moverse rana", { rana.position(self.position())})
	}

}


object rana {

	var property image = "rana/0.png"
	var property position = game.at(5, 0)
	
	//TODO: Es necesario hacer los metodos de movimiento y "colision" con los bordes de la pantalla
	//Porque se va a dejar de usar el addVisualCharacter para la rana.
	
}

program game {
	// Resolucion 700x800 con celdas de 50p
	game.width(14)
	game.height(16)
	game.boardGround("fondo.png")
		/*TODO: En la version final van a haber varios autos, pero si hay que hacer todo esto por cada auto, va a haber una masa de codigo de creacion de autos. 
		 Si se puede hay que hacer que la creacion de todos los autos se haga en pocas lineas.*/
		// ∨∨∨
	const autoA1 = new Auto(image = "autos/autoA/0.png", position = game.at(0, 2), velocidad = 200)
	const autoB1 = new Auto(image = "autos/autoB/0.png", position = game.at(0, 5), velocidad = 100)
	const autoB2 = new Auto(image = "autos/autoB/0.png", position = game.at(-5, 5), velocidad = 100)
	[ autoA1, autoB2, autoB1 ].forEach({ obstaculo =>
		game.addVisual(obstaculo)
		obstaculo.empezarMovimientoDerecha()
	})
	
		// ∧∧∧
	game.addVisualCharacter(rana)
	game.onCollideDo(rana, { colisionador => colisionador.colisionarConRana() })
	game.start()
}
