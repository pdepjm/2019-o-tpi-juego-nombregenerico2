import wollok.game.*
import actores.*
import clasesBase.*

object spawner {

	method spawnearTronco(posicionInicial, velocidadTronco, direccionTronco) {
		const imagenPrimerTronco = "tronco/" + direccionTronco.nombre() + ".png"
		const imagenUltimoTronco = "tronco/" + direccionTronco.opuesto().nombre() + ".png"
		const tercerTronco = new Tronco(image = imagenUltimoTronco, position = direccionTronco.posicionADistanciaDirecta(posicionInicial, -2), velocidad = 0, direccion = direccionTronco, proximoTronco = troncoNulo)
		const segundoTronco = new Tronco(image = "tronco/body.png", position = direccionTronco.posicionADistanciaDirecta(posicionInicial, -1), velocidad = 0, direccion = direccionTronco, proximoTronco = tercerTronco)
		const primerTronco = new Tronco(image = imagenPrimerTronco, position = posicionInicial, velocidad = velocidadTronco, direccion = direccionTronco, proximoTronco = segundoTronco)
		[ tercerTronco, segundoTronco, primerTronco ].forEach({ tronco => game.addVisual(tronco)})
		primerTronco.empezarMovimientoConstante()
	}

	method spawnearFilaDeAutos(cantidadAutos, fila, velocidadAutos, direccionAutos, distanciaEntreAutos) { // TODO: Los autos se desincronizan, tal vez se puede hacer como los troncos? Eso tal vez haria necesaria la clase de seguidor o algo
		var ultimaPosicionDeAuto = game.at(0, fila)
		const autos = []
		const numeroRandomDeSpriteAuto = [ 1, 2, 3, 4 ].anyOne().toString()
		const spriteAuto = "autos/auto" + numeroRandomDeSpriteAuto + "/" + direccionAutos.nombre() + ".png"
		cantidadAutos.times({ _ =>
			autos.add(new Obstaculo(image = spriteAuto, position = ultimaPosicionDeAuto, velocidad = velocidadAutos, direccion = direccionAutos))
			ultimaPosicionDeAuto = ultimaPosicionDeAuto.right(distanciaEntreAutos)
		})
		autos.forEach({ auto =>
			game.addVisual(auto)
			auto.empezarMovimientoConstante()
		})
	}

}

program game {
	// Resolucion 700x800 con celdas de 50p
	game.width(14)
	game.height(16)
	game.boardGround("fondo.png")
	spawner.spawnearTronco(game.at(3, 9), 500, izquierda)
	spawner.spawnearTronco(game.at(4, 10), 250, derecha)
	spawner.spawnearFilaDeAutos(5, 3, 100, derecha, 4)
	const rana2P = new Rana(nombreSprite = "rana2P", posicionInicial = game.at(11, 1), position = game.at(11, 1), otraRana = null) //TODO: Medio HORRIBLE
	const rana1P = new Rana(nombreSprite = "rana", otraRana = rana2P)
	rana2P.otraRana(rana1P)
	game.addVisual(rana1P)
	game.addVisual(rana2P)
	game.onCollideDo(rana2P, { colisionador => colisionador.colisionarConUnaRana(rana2P) })
	game.onCollideDo(rana1P, { colisionador => colisionador.colisionarConUnaRana(rana1P) })
	keyboard.up().onPressDo({ rana1P.tratarDeMoverseEnDireccion(arriba) })
	keyboard.down().onPressDo({ rana1P.tratarDeMoverseEnDireccion(abajo) })
	keyboard.right().onPressDo({ rana1P.tratarDeMoverseEnDireccion(derecha) })
	keyboard.left().onPressDo({ rana1P.tratarDeMoverseEnDireccion(izquierda) })
	keyboard.w().onPressDo({ rana2P.tratarDeMoverseEnDireccion(arriba) })
	keyboard.s().onPressDo({ rana2P.tratarDeMoverseEnDireccion(abajo) })
	keyboard.d().onPressDo({ rana2P.tratarDeMoverseEnDireccion(derecha) })
	keyboard.a().onPressDo({ rana2P.tratarDeMoverseEnDireccion(izquierda) })
	game.start()
}
